# -*- coding: utf-8 -*-
# @Author: dreamBoy
# @Date:   2018-09-27 23:41:05
# @Email:  wpf2106@gmail.com
# @Desc:   Welcome to my world!
# @Motto:  Brave & Naive!
# @Last Modified by:   BlueDreamStar
# @Last Modified time: 2019-04-12 14:21:10
import numpy as np
from matplotlib.ticker import MultipleLocator, FormatStrFormatter  
from pylab import *
import matplotlib.pyplot as plt

## define the font
font = {'family' : 'serif',  
        'color'  : 'black',  
        'weight' : 'normal',  
        'size'   : 16,  
        }
## wraper the plot function
##############################
## Params:
## pType is the figure type, such as plot, bar
## iters is the painting interval along x-axis, in general, iters is generated by numpy.array
## data is the input data which will be draw in the figure
## colors is the color array for lines or bars
## axis_label is the label along x-axis & y-axis
## outSaveFile is the saveObjectFile
## lengendLoc is the location where lengend located
## lwValue is the line wieght of plot
## multiNum
## xlimit
## ylimit
## xtick
## ytick
## tickStep is the interval between two ticks in x-axis
##############################
def plotAndSaveFigure(pType, iters, data, colors, labels, axis_label, outSaveFile, lengendLoc="upper right", lwValue=1.6, multiNum=2, xlimit=None, ylimit=None, xtick=None, ytick=None, tickStep=1):
	if len(colors) <= 0: return
# 	figure(1)
	foo_fig = plt.gcf() # get current figure
	
	if pType == 'bar':   
		total_width, n = 0.8, len(labels)
		width = total_width / n
		x = iters - (total_width - width) / 2
		
		if len(labels) == 1:
			plt.bar(x + 0 * width , data, facecolor = 'lightskyblue', width=width, label=labels[0])
		else:
			for i in range(len(labels)):
				plt.bar(x + i * width , data[i], lw=lwValue, width=width, label=labels[i])
	else:
		if len(labels) == 1:
			plt.plot(iters, data, colors[0], lw=lwValue, label=labels[0])
		else:
			for i in range(len(labels)):
				plt.plot(iters, data[i], colors[i], lw=lwValue, label=labels[i])
                
	plt.draw();
	ax=plt.gca()
	ax.set_xlabel(axis_label[0],fontdict=font)
	ax.set_ylabel(axis_label[1],fontdict=font)
	if not xlimit == None: plt.xlim((xlimit[0],xlimit[1]))
	if not ylimit == None: plt.ylim((ylimit[0],ylimit[1]))
	if not xtick == None: plt.xticks(iters[::tickStep], xtick)
	if not xtick == None: ax.set_xticklabels(xtick,rotation=90)
	if not ytick == None: plt.yticks(iters, ytick)
	xmajorLocator = MultipleLocator(multiNum)
	plt.legend(loc=lengendLoc, prop={'size': 16}) 
	plt.grid()
	foo_fig.savefig('%s.png' %(outSaveFile), bbox_inches='tight', format='png', dpi=1000)
	clf()
    
### return a list for ticks and a array for value
def read_label_value(fileInputDir):
	fileInput = open(fileInputDir)
	xtick = []
	dataValue = []
	for line in fileInput.readlines():
		lineArr = line.strip().split('\t')
		xtick.append(lineArr[0])
		dataValue.append(lineArr[1])
	dataValue = np.array(dataValue)
	return xtick, dataValue